# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: Node.js Package

on:
  push:
  pull_request:
    branches: [master]
  release:
    types: [created]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 12
      - run: npm ci
      - run: npm test
      - run: echo "${{ secrets.HWORLD }}"

#  setup-build-publish-deploy:
#    name: Setup, Build, Publish, and Deploy
#    runs-on: ubuntu-latest
#    env:
#      PROJECT_ID: ${{ secrets.PROJECT_ID }}
#      GKE_CLUSTER: ${{ secrets.CLUSTER_NAME }}   # Add your cluster name here.
#      GKE_ZONE: us-central1-a  # Add your cluster zone here.
#      GKE_LOCATION: Council Bluffs
#      DEPLOYMENT_NAME: staging-helloworld # Add your deployment name here.
#      IMAGE: static-site
#    steps:
#
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      # Setup gcloud CLI
#      - uses: google-github-actions/setup-gcloud@v0.2.0
#        with:
#          service_account_key: ${{ secrets.GKE_SA_KEY }}
#          project_id: ${{ secrets.PROJECT_ID }}
#
#      # Configure docker to use the gcloud command-line tool as a credential helper
#      - run: |-
#          gcloud --quiet auth configure-docker
#
#      # Get the GKE credentials so we can deploy to the cluster
#      - uses: google-github-actions/get-gke-credentials@v0.3.0
#        with:
#          cluster_name: hello-github
#          location: us-central1-c
#          credentials: ${{ secrets.GKE_SA_KEY }}
#
#      # Build the Docker image
#      - name: Build
#        run: |-
#          docker build \
#            --tag "gcr.io/${{ secrets.PROJECT_ID }}/static-site:${{ github.sha  }}" \
#            --build-arg GITHUB_SHA="${{ github.sha }}" \
#            --build-arg GITHUB_REF="${{ github.ref  }}" \
#            .
#
#      - name: Publish
#        run: |-
#          docker push \
#          "gcr.io/${{ secrets.PROJECT_ID }}/static-site:${{ github.sha }}"
#
#      # Set up kustomize
#      - name: Set up Kustomize
#        run: |-
#          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#          chmod u+x ./kustomize
#
#      # Deploy the Docker image to the GKE cluster
#      - name: Deploy
#        run: |-
#          ./kustomize edit set image gcr.io/${{ secrets.PROJECT_ID }}/static-site:TAG=${{ github.sha }}
#          ./kustomize build . | kubectl apply -f -
#          kubectl rollout status deployment/staging
#          kubectl get services -o wide

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY_DEC }}
          service_account_email: ${{ secrets.GKE_EMAIL }}
          project_id: ${{ secrets.PROJECT_ID }}

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      - name: Build
        run: |-
          docker build \
            --tag "gcr.io/${{ secrets.PROJECT_ID }}/hello:${{ github.sha  }}" \
            --build-arg GITHUB_SHA="${{ github.sha }}" \
            --build-arg GITHUB_REF="${{ github.ref  }}" \
            .

      - name: Publish
        run: |-
          docker push \
            "gcr.io/${{ secrets.PROJECT_ID }}/hello:${{ github.sha }}"


  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    env:
      IMAGE_NAME: gcr.io/${{ secrets.PROJECT_ID }}/hello:${{ github.sha  }}
      PORT: 3000
    steps:
      - name: Check Out
        uses: actions/checkout@v2

        # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY_DEC }}
          service_account_email: ${{ secrets.GKE_EMAIL }}
          project_id: ${{ secrets.PROJECT_ID }}

      - name: Create cluster
      #  run: gcloud run deploy ${{ secrets.PROJECT_ID }} --image $IMAGE_NAME --port $PORT --platform managed --region us-central1
        run: |-
      #    gcloud container clusters create cluster-for-simple-app --zone=us-east1-c --project=${{ secrets.PROJECT_ID }}
          gcloud container clusters get-credentials cluster-for-simple-app --zone=us-east1-c
              kubectl apply -f deployment.yml
